//*****************************************************************************
// Torque -- HLSL procedural shader
//*****************************************************************************

// Dependencies:
//------------------------------------------------------------------------------
// Autogenerated 'Light Buffer Conditioner [RGB]' Uncondition Method
//------------------------------------------------------------------------------
inline void autogenUncondition_bde4cbab(in float4 bufferSample, out float3 lightColor, out float NL_att, out float specular)
{
   lightColor = bufferSample.rgb;
   NL_att = dot(bufferSample.rgb, float3(0.3576, 0.7152, 0.1192));
   specular = max(bufferSample.a / NL_att, 0.00001f);
}


#include "shaders/common/lighting.hlsl"
//------------------------------------------------------------------------------
// Autogenerated 'GBuffer Conditioner' Uncondition Method
//------------------------------------------------------------------------------
inline float4 autogenUncondition_55070f7a(sampler2D prepassSamplerVar, float2 screenUVVar)
{
   // Sampler g-buffer
   #if TORQUE_SM >= 30
      float4 bufferSample = tex2Dlod(prepassSamplerVar, float4(screenUVVar,0,0));
   #else
      float4 bufferSample = tex2D(prepassSamplerVar, screenUVVar);
   #endif

   // g-buffer unconditioner: float4(normal.X, normal.Y, depth Hi, depth Lo)
   float2 _inpXY = bufferSample.xy;
   float _xySQ = dot(_inpXY, _inpXY);
   float4 _gbUnconditionedInput = float4( sqrt(half(1.0 - (_xySQ / 4.0))) * _inpXY, -1.0 + (_xySQ / 2.0), bufferSample.a).xzyw;
   
   // Decode depth
   _gbUnconditionedInput.w = dot( bufferSample.zw, float2(1.0, 1.0/65535.0));

   return _gbUnconditionedInput;
}


#include "shaders/common/torque.hlsl"

// Features:
// Vert Position
// Base Texture
// Diffuse Color
// Alpha Test
// Specular Map
// Bumpmap [Deferred]
// Deferred RT Lighting
// Pixel Specular [Deferred]
// Minnaert Shading [Deferred]
// Visibility
// HDR Output

struct ConnectData
{
   float2 texCoord        : TEXCOORD0;
   float4 screenspacePos  : TEXCOORD1;
   float3 wsPosition      : TEXCOORD2;
   float2 vpos            : VPOS;
};


struct Fragout
{
   float4 col : COLOR0;
};


//-----------------------------------------------------------------------------
// Main
//-----------------------------------------------------------------------------
Fragout main( ConnectData IN,
              uniform sampler2D diffuseMap      : register(S0),
              uniform float4    diffuseMaterialColor : register(C0),
              uniform float     alphaTestValue  : register(C1),
              uniform sampler2D specularMap     : register(S1),
              uniform float4    rtParams2       : register(C5),
              uniform sampler2D lightInfoBuffer : register(S2),
              uniform float     specularPower   : register(C2),
              uniform float     minnaertConstant : register(C3),
              uniform sampler2D prepassBuffer   : register(S3),
              uniform float3    eyePosWorld     : register(C6),
              uniform float     visibility      : register(C4)
)
{
   Fragout OUT;

   // Vert Position
   
   // Base Texture
   OUT.col = tex2D(diffuseMap, IN.texCoord);
   
   // Diffuse Color
   OUT.col *= diffuseMaterialColor;
   
   // Alpha Test
   clip( OUT.col.a - alphaTestValue );
   
   // Specular Map
   float4 specularColor = tex2D(specularMap, IN.texCoord);
   
   // Bumpmap [Deferred]
   
   // Deferred RT Lighting
   float2 uvScene = IN.screenspacePos.xy / IN.screenspacePos.w;
   uvScene = ( uvScene + 1.0 ) / 2.0;
   uvScene.y = 1.0 - uvScene.y;
   uvScene = ( uvScene * rtParams2.zw ) + rtParams2.xy;
   float3 d_lightcolor;
   float d_NL_Att;
   float d_specular;
   lightinfoUncondition(tex2D(lightInfoBuffer, uvScene), d_lightcolor, d_NL_Att, d_specular);
   OUT.col *= float4(d_lightcolor, 1.0);
   
   // Pixel Specular [Deferred]
   float specular = pow( d_specular, ceil(specularPower / AL_ConstantSpecularPower)) * d_NL_Att;
   OUT.col += float4( specularColor.rgb, 0 ) * specular;
   
   // Minnaert Shading [Deferred]
   float3 wsView = normalize( eyePosWorld - IN.wsPosition );
   float4 normalDepth = prepassUncondition(prepassBuffer, uvScene);
   float vDotN = dot(normalDepth.xyz, wsView);
   float Minnaert = pow( d_NL_Att, minnaertConstant) * pow(vDotN, 1.0 - minnaertConstant);
   OUT.col *= float4(Minnaert, Minnaert, Minnaert, 1.0);
   
   // Visibility
   fizzle( IN.vpos, visibility );
   
   // HDR Output
   OUT.col = hdrEncode( OUT.col );
   

   return OUT;
}
